var m=Object.defineProperty;var u=(o,e,l)=>e in o?m(o,e,{enumerable:!0,configurable:!0,writable:!0,value:l}):o[e]=l;var r=(o,e,l)=>(u(o,typeof e!="symbol"?e+"":e,l),l);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))c(s);new MutationObserver(s=>{for(const t of s)if(t.type==="childList")for(const n of t.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&c(n)}).observe(document,{childList:!0,subtree:!0});function l(s){const t={};return s.integrity&&(t.integrity=s.integrity),s.referrerpolicy&&(t.referrerPolicy=s.referrerpolicy),s.crossorigin==="use-credentials"?t.credentials="include":s.crossorigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function c(s){if(s.ep)return;s.ep=!0;const t=l(s);fetch(s.href,t)}})();class d{constructor(e){r(this,"email");this.email=e}get email(){return this.email}set email(e){this.email=e}}class a extends d{constructor({email:l,accessLevel:c}){super(l);r(this,"blacklistedEmails",[]);this.accessLevel=c}blacklist(l){this.blacklistedEmails.push(l)}isBlacklisted(l){return this.blacklistedEmails.includes(l)}}r(a,"AccessLevel",{BASIC:"basic",SUPERUSER:"superuser"});const i=new a({email:"mango@mail.com",accessLevel:a.AccessLevel.SUPERUSER});console.log(i.email);console.log(i.accessLevel);i.blacklist("poly@mail.com");console.log(i.blacklistedEmails);console.log(i.isBlacklisted("mango@mail.com"));console.log(i.isBlacklisted("poly@mail.com"));
